services:
  unifi-db:
    image: docker.io/mongo:${MONGO_VERSION}
    container_name: unifi-db
    hostname: unifi-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_DBNAME: ${MONGO_DBNAME}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
    volumes:
      - mongo_data:/data/db
      - ./init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh:ro
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped
    labels:
      - "diun.enable=true"
      - "diun.watch_repo=true"
      - "diun.include_tags=^8.0.(8|[9-9][0-9]*)$"
      - "autoheal=true"
    networks:
      - unifi_net

  unifi:
    image: lscr.io/linuxserver/unifi-network-application:${UNIFI_VERSION}
    container_name: unifi-app
    hostname: unifi-app
    environment:
      PUID: 1000
      PGID: 1000
      TZ: Etc/UTC
      MONGO_USER: ${MONGO_USER}
      MONGO_PASS: ${MONGO_PASS}
      MONGO_HOST: unifi-db
      MONGO_PORT: ${MONGO_PORT}
      MONGO_DBNAME: ${MONGO_DBNAME}
      MONGO_AUTHSOURCE: ${MONGO_AUTHSOURCE}
    volumes:
      - unifi_data:/config
    ports:
      - 8443:8443
      - 3478:3478/udp # stun
      - 10001:10001/udp
      - 8080:8080
      - 1900:1900/udp # Make controller discoverable on L2 network
      - 8843:8843 # guest-portal ssl
      - 8880:8880 # guest-portal
      #- 6789:6789 # algo mobile
      #- 5514:5514/udp # remote syslog
    healthcheck:
      test: ["CMD", "curl", "-k", "-f", "https://localhost:8443/manage/account/login"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    depends_on:
      unifi-db:
        condition: service_healthy
    labels:
      - "diun.enable=true"
      - "diun.watch_repo=true"
      - "diun.include_tags=^9.0.(1[1-9]|[1-9][0-9]+)$"
      - "autoheal=true"
    networks:
      - unifi_net

  autoheal:
    image: willfarrell/autoheal:latest
    container_name: unifi-autoheal
    hostname: unifi-autoheal
    #environment:
      #AUTOHEAL_CONTAINER_LABEL: all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    networks:
      - unifi_net

  diun:
    image: crazymax/diun:latest
    container_name: unifi-diun
    hostname: unifi-diun
    command: serve
    volumes:
      - diun_data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TZ: America/Argentina/Buenos_Aires
      LOG_LEVEL: info
      DIUN_WATCH_WORKERS: 20
      DIUN_WATCH_SCHEDULE: "0 0 0 1 * *" # @monthly - una vez por mes, el primer dia del mes.
      DIUN_WATCH_JITTER: 30s
      DIUN_WATCH_RUNONSTARTUP: true
      DIUN_PROVIDERS_DOCKER: true
      DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT: false # para que tenga en cuenta a todos los contenedores sino hay que usar labels
      DIUN_NOTIF_TELEGRAM_TOKEN: ${DIUN_NOTIF_TELEGRAM_TOKEN}
      DIUN_NOTIF_TELEGRAM_CHATIDS: ${DIUN_NOTIF_TELEGRAM_CHATIDS}
      DIUN_NOTIF_TELEGRAM_TEMPLATEBODY: "Hay una actualizaci√≥n disponible para {{ .Entry.Image }} ejecutandose en el host {{ .Meta.Hostname }}"
    restart: always
    networks:
      - unifi_net

volumes:
  mongo_data:
    name: mongo_data
    driver: local
  unifi_data:
    name: unifi_data
    driver: local
  diun_data:
    name: diun_data
    driver: local

networks:
  unifi_net:
    name: unifi_net
    driver: bridge
